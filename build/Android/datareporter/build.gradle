apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version = '1.3.3'

android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 133
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++14",
                            "-DPIC",
                            "-fPIC",
                            "-llog",
                            "-fsanitize=address -fno-omit-frame-pointer"

                    cFlags  "-ffunction-sections",
                            "-fdata-sections",
                            "-llog",
                            "-mfpu=neon",
                            "-mthumb",
                            "-mfloat-abi=softfp",
                            "-fstack-protector",
                            "-fsanitize=address -fno-omit-frame-pointer"

                    abiFilters "armeabi-v7a", "arm64-v8a"
                    arguments '-DANDROID_ARM_NEON=TRUE',
                            '-DANDROID_ARM_MODE=arm',
                            '-DANDROID_PLATFORM=android-17',
                            '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static',
                            //'-DANDROID_ABI=armeabi-v7a',"-DCMAKE_BUILD_TYPE=Debug"
                            "-DCMAKE_BUILD_TYPE=Debug"

                    //'-DANDROID_STL=c++_static',
                    //'-DANDROID_STL=gnustl_static',
                    //-DANDROID_ALLOW_UNDEFINED_SYMBOLS=true
                }
            }

            ndk {
                // 设置支持的 SO 库架构，注意这里要根据你的实际情况来设置
                abiFilters 'armeabi-v7a', 'arm64-v8a'
                //''armeabi','armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64'
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++14",
                            "-DPIC",
                            "-fPIC",
                            "-O3", //gcc use Os
                            "-DNDEBUG",
                            "-fvisibility=hidden",
                            "-llog"

                    cFlags "-fvisibility=hidden",
                            "-ffunction-sections",
                            "-fdata-sections",
                            "-O3",
                            "-DNDEBUG",
//                            "-march=armv7-a",
//                            "--fix-cortex-a8",
                            "-mfpu=neon",
                            "-mthumb",
                            "-mfloat-abi=softfp"

                    abiFilters 'armeabi-v7a',"arm64-v8a"
                    arguments '-DANDROID_ARM_NEON=TRUE',
                            '-DANDROID_ARM_MODE=arm',
                            '-DANDROID_PLATFORM=android-17',
                            '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static',
                            "-DCMAKE_BUILD_TYPE=Release"

                    //'-DANDROID_STL=c++_static',
                    //'-DANDROID_STL=gnustl_static',
                    //-DANDROID_ALLOW_UNDEFINED_SYMBOLS=true
                }
            }

            ndk {
                // 设置支持的 SO 库架构，注意这里要根据你的实际情况来设置
                abiFilters 'armeabi-v7a', 'arm64-v8a'
                //''armeabi','armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64'
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
			version "3.10.2"
        }
    }
	
	sourceSets.main {
        jni.srcDirs = ['../../../src']
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
            def outFileName = outputFileName.toString()
            outFileName = outFileName.replace(".aar","")
            if (variant.buildType.name.equals('debug')) {
                outputFileName = "${outFileName}_${defaultConfig.versionName}.aar"
            }
            if (variant.buildType.name.equals('release')) {
                outputFileName = "${outFileName}_${defaultConfig.versionName}.aar"
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def siteUrl = 'https://github.com/luojilab/DataReporter'      // 项目的主页   这个是说明，可随便填
def gitUrl = 'https://github.com/luojilab/DataReporter.git'      // Git仓库的url  这个是说明，可随便填
group = "com.luojilab.component"    // 这里是groupId ,必须填写  一般填你唯一的包名

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                // Add your description here
                name 'DataReporter'     //项目描述
                url siteUrl
                // Set your license
                licenses {
                    license {
                        name 'MIT'
                        url 'https://mit-license.org/'
                    }
                }
                developers {
                    developer {
                        id 'bingjian'        //填写开发者的一些基本信息
                        name 'lixiaoyu'    //填写开发者的一些基本信息
                        email 'lixiaoyu@luojilab.com'   //填写开发者的一些基本信息
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")    //读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")   //读取 local.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        repo = "sourcepool"
        name = "DataReporter"    //发布到JCenter上的项目名字，必须填写
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["MIT"]
        publish = true
    }
}

javadoc {
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}
